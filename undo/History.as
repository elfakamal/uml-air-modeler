// History.as  by Daniel Freeman http://www.e2easy.co.ccpackage {		import flash.display.Stage;		public class History	{		 		// We truncate the historystack to this length.		private const loglength:int=50;							// The list of document states.		private var historystack:Array=new Array();				// and the current position in the list.		private var index:int=-1;			 		// We must call redoAction() when we Undo.		// But we must only call it once.		// undomode just ensures that we play by the rules. 		private var undomode:Boolean=false;                                             		public function History() 		{			// Nothing in the constructor.		} 				public function get canundo():Boolean		{			return index >= 0;		}		 				public function get canredo():Boolean 		{			return index < historystack.length - 1;		}						public function undo():HistoryItem 		{			if (canundo) 			{				undomode = true;								// Just return a document state and decrement the current position.				return historystack[index--];			} 			else			{				trace("*Can't undo");			}						return null;		}						public function redo():HistoryItem 		{			if (canredo) 			{				if (undomode) 				{					trace('*Error in redo. ' + historystack[index + 1].action);				} 				else 				{					// Return a document state and increment the current position.					return historystack[++index];						}			} 			else 			{				trace("*Can't redo");			}						return null;		}  		public function record(action:String, params:Array):void 		{						// Remove redo states.			historystack.splice(index + 1, historystack.length - (index + 1));						// Record the document state at the next available position in the list.			historystack.push(new HistoryItem(action, params));						// Truncate the historystack.			if (historystack.length > loglength) 			{				historystack.splice(0,1);			}						// Set the current position.			index = historystack.length - 1;		} 				public function redoaction(action:String,params:Array):void 		{			var item:HistoryItem; 			 // A bit of logic that ensures we play by the rules.			if (undomode) 			{				item = historystack[index + 1];								if (item == null) 				{					trace('**Error in redoevents.  Unexpected redo.');				} 				else 				{					// Record the document state that enables us to redo().					item.redoAction = action;					item.redoParameters = params;				}								undomode = false;			} 			else 			{				trace('**Error in redoevents.  Multiple redo.');			}		} 			}	} 